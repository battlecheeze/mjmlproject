const gulp = require('gulp'),
      mjml = require('gulp-mjml'),
      browserSync = require('browser-sync'),
      del = require('del');

// Require your own components if need, and your mjmlEngine (possibly with options)
// require('./components)
const mjmlEngine = require('mjml');

const    // source
      globDir = '**/*',
      outputHTML = "src/html/",
      watchHTML = "src/html/" + globDir + ".html,",
      images = "src/images/",
      mjmlWatch = "src/mjml/" + globDir + ".mjml",
      // partials
      mjmlPartials = "src/partials/" + globDir + ".mjml",
      // distribution
      imageDist = 'dist/images',
      htmlDist = 'dist/html/',
      // archive
      mjmlArchive = "!src/mjml/archive/",
      imageArchive = "!src/images/archive/",
      htmlArchive = "!src/html/archive/";

// If you'd like to get validation errors and , use strict and a custom error handler function. Note that using strict will not render the file in case of error:
/*
function handleError(err) {
   console.log(err.toString());
   this.emit('end');
}
*/

/*
function mjmlEditor() {
   return gulp.src(mjmlWatch)
      .pipe(mjml(mjmlEngine, {validationLevel: 'strict'}))
      .on('error', handleError())
      .pipe(gulp.dest(outputHTML));
}
*/

function mjmlEditor() {
   return gulp.src(mjmlWatch)
   .pipe(mjml())
   .pipe(gulp.dest(outputHTML));
}

function mjmlOutput() {
   return gulp.src(mjmlWatch)
   .pipe(mjml(mjmlEngine, {
      "minify": true,
      // change the attribute of minifyCSS in node_modues > mjml-core > lib > index.js then find minify
   }))
   .pipe(gulp.dest(htmlDist));
}

function clean() {
   return del([
      htmlDist + globDir,
      imageDist + globDir
   ]);
}

function browserSYNC(done) {
   browserSync.init({
      server:{
         baseDir: 'src',
         index: '/html/index.html'
      },
      browser: ['/Applications/Firefox Developer Edition.app/Contents/MacOS/firefox', '/Applications/Google Chrome Canary.app/Contents/MacOS/Google\ Chrome\ Canary']
   });
   done();
}

function watchFiles() {
   gulp.watch(mjmlWatch, mjmlEditor);
   gulp.watch(images);
   gulp.watch(watchHTML).on('change', browserSync.reload);
}

exports.mjmlEditor = mjmlEditor;
exports.mjmlOutput = mjmlOutput;
exports.clean = clean;
exports.browserSYNC = browserSYNC;
exports.watchFiles = watchFiles;
exports.default = gulp.parallel(browserSYNC, watchFiles);
exports.build = gulp.parallel(gulp.series(clean, mjmlOutput), browserSYNC, watchFiles); 
